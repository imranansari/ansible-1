---
- name: download and checksum dropboxd tarball
  tags:
    - dropboxd
  get_url:
    url: "https://www.dropbox.com/download?plat=lnx.x86_64"
    dest: "/tmp/dropboxd.tar"
    checksum: "sha256:{{ dropboxd_dropbox_sha256 }}"

- name: download and checksum dropbox.py script
  tags:
    - dropboxd
  get_url:
    url: "https://www.dropbox.com/download?dl=packages/dropbox.py"
    dest: "/usr/local/bin/dropbox"
    checksum: "sha256:{{ dropboxd_dropboxpy_sha256 }}"

- name: create dropboxd user
  tags:
    - dropboxd
  user:
    name: dropboxd
    shell: "/bin/false"
    comment: "dropboxd service user"

- name: unpack tarball
  tags:
    - dropboxd
  unarchive:
    src: "/tmp/dropboxd.tar"
    dest: "/home/dropboxd/"
    copy: no

- name: check if dropboxd service exists
  tags:
    - dropboxd
  stat:
    path: "/lib/systemd/system/dropboxd.service"
  register: checked

- name: stop dropboxd service if it exists
  tags:
    - dropboxd
  when: checked.stat.exists
  service:
    name: dropboxd
    state: stopped

- name: set permissions on dropboxd binary
  tags:
    - dropboxd
  file:
    path: "/home/dropboxd/.dropbox-dist/dropboxd"
    owner: dropboxd
    group: dropboxd
    mode: 0755

- name: set permissions on dropbox script
  tags:
    - dropboxd
  file:
    path: "/usr/local/bin/dropbox"
    owner: dropboxd
    group: dropboxd
    mode: 0755

- name: create dropboxd systemd unit
  tags:
    - dropboxd
  template:
    src: dropboxd.service.j2
    dest: "/lib/systemd/system/dropboxd.service"

- name: reload systemd configurations
  tags:
    - dropboxd
  command: "systemctl daemon-reload"

- name: start dropboxd service
  tags:
    - dropboxd
  service:
    name: dropboxd
    state: started
    enabled: yes

- name: remove temporary dropboxd tarball
  tags:
    - dropboxd
  file:
    path: "/tmp/dropboxd.tar"
    state: absent
